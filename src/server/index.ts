import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import dotenv from 'dotenv';
import TelegramBot, { Message } from 'node-telegram-bot-api';
import User from './models/User';
import path from 'path';

dotenv.config();

const app = express();
const port = process.env.PORT || 3000;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '';
const WEBHOOK_URL = process.env.WEBHOOK_URL || `https://${process.env.RENDER_EXTERNAL_URL}/webhook/${TELEGRAM_BOT_TOKEN}`;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '../../public')));

// MongoDB connection
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/black-mark-app')
  .then(() => console.log('Connected to MongoDB'))
  .catch((err: Error) => console.error('MongoDB connection error:', err));

// Telegram Bot setup
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { 
  webHook: {
    port: port
  }
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
bot.setWebHook(WEBHOOK_URL).then(() => {
  console.log('Webhook set successfully');
}).catch((error) => {
  console.error('Error setting webhook:', error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('error', (error: Error) => {
  console.error('Telegram Bot error:', error);
});

// –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.onText(/\/start/, async (msg: Message) => {
  const chatId = msg.chat.id;
  const username = msg.from?.username || msg.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await User.findOneAndUpdate(
      { telegramId: msg.from?.id },
      { 
        telegramId: msg.from?.id,
        username: username,
        stars: 0,
        blackMark: false
      },
      { upsert: true }
    );

    const welcomeMessage = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —á—ë—Ä–Ω—ã—Ö –º–µ—Ç–æ–∫, ${username}! üéØ\n\n` +
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥–æ—á–µ–∫\n' +
      '/mark - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á—ë—Ä–Ω—É—é –º–µ—Ç–∫—É\n' +
      '/remove - –°–Ω—è—Ç—å —á—ë—Ä–Ω—É—é –º–µ—Ç–∫—É (50 –∑–≤—ë–∑–¥–æ—á–µ–∫)\n' +
      '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ';
    
    bot.sendMessage(chatId, welcomeMessage);
  } catch (error) {
    console.error('Error in /start command:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
bot.onText(/\/balance/, async (msg: Message) => {
  const chatId = msg.chat.id;
  
  try {
    const user = await User.findOne({ telegramId: msg.from?.id });
    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      return;
    }

    const message = `–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.stars} ‚≠êÔ∏è\n` +
      `–°—Ç–∞—Ç—É—Å —á—ë—Ä–Ω–æ–π –º–µ—Ç–∫–∏: ${user.blackMark ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ—Ç'}`;
    
    bot.sendMessage(chatId, message);
  } catch (error) {
    console.error('Error in /balance command:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —á—ë—Ä–Ω–æ–π –º–µ—Ç–∫–∏
bot.onText(/\/mark/, async (msg: Message) => {
  const chatId = msg.chat.id;
  
  try {
    const user = await User.findOne({ telegramId: msg.from?.id });
    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      return;
    }

    if (user.blackMark) {
      bot.sendMessage(chatId, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á—ë—Ä–Ω—ã–µ –º–µ—Ç–∫–∏, –ø–æ–∫–∞ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –º–µ—Ç–∫–∞!');
      return;
    }

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç–∫–∏
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á—ë—Ä–Ω–æ–π –º–µ—Ç–∫–∏:');
  } catch (error) {
    console.error('Error in /mark command:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –°–Ω—è—Ç–∏–µ —á—ë—Ä–Ω–æ–π –º–µ—Ç–∫–∏
bot.onText(/\/remove/, async (msg: Message) => {
  const chatId = msg.chat.id;
  
  try {
    const user = await User.findOne({ telegramId: msg.from?.id });
    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      return;
    }

    if (!user.blackMark) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —á—ë—Ä–Ω–æ–π –º–µ—Ç–∫–∏!');
      return;
    }

    if (user.stars < 50) {
      bot.sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥–æ—á–µ–∫! –ù—É–∂–Ω–æ 50 ‚≠êÔ∏è');
      return;
    }

    // –°–Ω–∏–º–∞–µ–º –º–µ—Ç–∫—É –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥–æ—á–∫–∏
    user.blackMark = false;
    user.stars -= 50;
    await user.save();

    // –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤—ë–∑–¥–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –º–µ—Ç–∫–∏
    if (user.blackMarkFrom) {
      const markSender = await User.findOne({ telegramId: user.blackMarkFrom });
      if (markSender) {
        markSender.stars += 5;
        await markSender.save();
      }
    }

    bot.sendMessage(chatId, '–ß—ë—Ä–Ω–∞—è –º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞! -50 ‚≠êÔ∏è');
  } catch (error) {
    console.error('Error in /remove command:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –º–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// API Routes
app.get('/api/health', (req, res) => {
  res.json({ status: 'ok' });
});

app.get('/api/balance', async (req, res) => {
  try {
    const telegramId = req.query.telegramId;
    if (!telegramId) {
      return res.status(400).json({ error: 'Telegram ID is required' });
    }

    const user = await User.findOne({ telegramId: Number(telegramId) });
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    res.json({
      stars: user.stars,
      blackMark: user.blackMark
    });
  } catch (error) {
    console.error('Error fetching balance:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Start server
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
}); 